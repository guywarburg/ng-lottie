{"version":3,"sources":["../../../src/lottieAnimationView.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EACT,KAAK,EACL,MAAM,EAEN,MAAM,EACN,YAAY,EACZ,SAAS,EAET,WAAW,EACd,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,iBAAA,EAAkB,MAAO,iBAAA,CAAkB;AAMpD;IAeI,sCAAqB,UAAe;QAAf,eAAU,GAAV,UAAU,CAAK;QAVnC,gBAAW,GAAQ,IAAI,YAAY,EAAE,CAAC;QAWnC,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;QACpE,CAAC;IACL,CAAC;IAED,+CAAQ,GAAR;QACI,IAAI,CAAC,QAAQ,GAAG;YACZ,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa;YAC1C,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK;YACjC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK;YACzC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,KAAK,KAAK;YACzD,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;YAC7B,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,EAAE;SACxD,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,MAAM,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,MAAM,CAAC;QAE/C,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,IAAI,GAAQ,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;IACL,CAAC;IAuBL,mCAAC;AAAD,CAhEA,AAgEC;;AAtBM,uCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,gPAKU;aACvB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;CACzE,EAF6F,CAE7F,CAAC;AACK,2CAAc,GAA2C;IAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;CAC/D,CAAC","file":"lottieAnimationView.component.js","sourceRoot":"","sourcesContent":["import {\r\n    Component,\r\n    Input,\r\n    Inject,\r\n    OnInit,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChild,\r\n    ElementRef,\r\n    PLATFORM_ID\r\n} from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ndeclare let require: any;\r\n\r\n\r\n\r\nexport class LottieAnimationViewComponent implements OnInit {\r\n     options: any;\r\n     width: number;\r\n     height: number;\r\n\r\n     animCreated: any = new EventEmitter();\r\n\r\n     lavContainer: ElementRef;\r\n\r\n    public viewWidth: string;\r\n    public viewHeight: string;\r\n    private _options: any;\r\n    private bodymovin: any;\r\n    private isBrowser: boolean;\r\n\r\n    constructor( private platformId: any) {\r\n        this.isBrowser = isPlatformBrowser(platformId);\r\n        if (this.isBrowser) {\r\n            this.bodymovin = require('bodymovin/build/player/bodymovin.js');\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._options = {\r\n            container: this.lavContainer.nativeElement,\r\n            renderer: 'svg',\r\n            loop: this.options.loop !== false,\r\n            autoplay: this.options.autoplay !== false,\r\n            autoloadSegments: this.options.autoloadSegments !== false,\r\n            animationData: this.options.animationData,\r\n            path: this.options.path || '',\r\n            rendererSettings: this.options.rendererSettings || {}\r\n        };\r\n\r\n        this.viewWidth = this.width + 'px' || '100%';\r\n        this.viewHeight = this.height + 'px' || '100%';\r\n\r\n        if (this.isBrowser) {\r\n            let anim: any = this.bodymovin.loadAnimation(this._options);\r\n            this.animCreated.emit(anim);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'lottie-animation-view',\r\n    template: `\r\n        <ng-container *ngIf=\"isBrowser\">\r\n            <div #lavContainer\r\n                 [ngStyle]=\"{'width': viewWidth, 'height': viewHeight, 'overflow':'hidden', 'margin': '0 auto'}\">\r\n            </div>\r\n        </ng-container>`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'animCreated': [{ type: Output },],\n'lavContainer': [{ type: ViewChild, args: ['lavContainer', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}